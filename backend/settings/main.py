"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(ug#(uso!m#4$29cb66c%+%18w+y@4n&(=%ci2s*bhs$5-+1*p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


APP_NAME = os.environ.get('APP_NAME', 'Bivver')
BACKEND_URL = os.environ.get('BACKEND_URL', 'http://127.0.0.1:3000/')
CLIENT_FRONTEND_URL = os.environ.get('CLIENT_FRONTEND_URL', 'http://127.0.0.1:3001/')
SUPPLIER_FRONTEND_URL = os.environ.get('SUPPLIER_FRONTEND_URL', 'http://127.0.0.1:3002/')

# Application definition

INSTALLED_APPS = [
    'scout_apm.django',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'item.apps.ItemConfig',
    'order.apps.OrderConfig',
    'supplier.apps.SupplierConfig',
    'client.apps.ClientConfig',
    'user.apps.UserConfig',
    'django_filters',
]


AUTH_USER_MODEL = 'user.User'


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'content-disposition',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': os.environ.get('REDISCLOUD_URL', ''),
        'OPTIONS': {
            'DB': os.environ.get('REDISCLOUD_DB', 0)
        }
    }
}

ITEM_CACHE_EXPIRATION = 86400 # 1 day
VERIFICATION_TOKEN_EXPIRATION = datetime.timedelta(days=1)

if (DEBUG):
    MIDDLEWARE.append('backend.middleware.dev_cors_middleware')


#Celery
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

ROOT_URLCONF = 'backend.urls'

FROM_EMAIL = 'noreply@bivver.ca'
EMAIL_HOST = 'smtp.mailtrap.io'
EMAIL_HOST_USER = '663ef4e1aac735'
EMAIL_HOST_PASSWORD = '8c32a876c1569e'
EMAIL_PORT = '2525'

AWS_SES_ACCESS_KEY_ID = 'AKIA5UUIRTYXXJXZS4OG'
AWS_SES_SECRET_ACCESS_KEY = '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'

AWS_ACCESS_KEY_ID = 'AKIA5UUIRTYXX54EEM5F'
AWS_SECRET_ACCESS_KEY = '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'

AWS_S3_URL = 'https://s3.ca-central-1.amazonaws.com/bivver-public/'
AWS_VINOCOUNT_IMAGES_BUCKET_NAME = 'bivver-public'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=14)
}

DATETIME_FORMAT = '%b %-d %Y %-I:%M %p'

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('RDS_DB_NAME', 'vinocount'),
        'USER': os.environ.get('RDS_USERNAME', 'vinocount'),
        'PASSWORD': os.environ.get('RDS_PASSWORD', 'vinocount'),
        'HOST': os.environ.get('RDS_HOSTNAME', 'vinocount'),
        'PORT': '3306',
        'TEST': {
            'NAME': 'vinocount_test'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

AUTHENTICATION_BACKENDS = ['user.authentication.UserBackend']

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'static'),],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

# Stripe keys
STRIPE = {
    'API_KEY': 'pk_test_BJHlY3dKiWDpjGVihty1Zwm9',
    'CLIENT_SECRET': 'sk_test_4JxNtbEsWhtvC1pWHaYDCB4b',
    'CLIENT_ID': 'ca_Ehf6RukQblf1Rg23P0cHAdmBYs7cDGny',
    'TOKEN_URL': 'https://connect.stripe.com/oauth/token',
    'APPLICATION_FEE': 0.005,
    'PLANS': {
        'INVENTORY': 'plan_EzM3z5ohCaGOEq',
        'POS': 'plan_EzM24Q0tRf3WdH',
    }
}

# Scout application monitoring settings
SCOUT_MONITOR = True
SCOUT_KEY = os.environ.get('SCOUT_KEY', '')
SCOUT_NAME = 'Bivver Production'

SENDGRID = {
    'API_KEY': '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',
    'TEMPLATES': {
        'VERIFY_EMAIL': 'd-85b02a478db64ebeb242ec2a27b9a452',
        'ORDER_SUBMIT': 'd-eb9ca4a544cb4abc98461c12700322e6',
        'ORDER_APPROVE': 'd-909c1b91976e4398b571755e7515c507',
        'ORDER_DECLINE': 'd-ff725173c31c49aa83f22fd47a6e8831',
        'ORDER_REVISE': 'd-0fee3760bb2d4d02a689fccf9962645c',
        'ORDER_DELIVER': 'd-0780fe2d57924dca9fb24de0cc866427'
    }
}

# Html to PDF api
PDF_API_KEY = 'c5277e46-32bd-46ac-8e49-fc2b08f8c1fc'

# Tax API
TAX_API = {
    'canada': {
        'endpoint': 'http://api.salestaxapi.ca/v2/province/',
        'regions': {
            'newfoundland and labrador': 'NL',
            'alberta': 'AB',
            'british columbia': 'BC',
            'manitoba': 'MB',
            'new brunswick': 'NB',
            'nova scotia': 'NS',
            'northwest territories': 'NT',
            'nunavut': 'NU',
            'ontario': 'ON',
            'prince edward island': 'PE',
            'quebec': 'QC',
            'saskatchewan': 'SK',
            'yukon': 'YT'
        }
    }
}